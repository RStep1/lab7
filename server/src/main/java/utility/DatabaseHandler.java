package utility;

import java.sql.*;

import processing.Console;

public class DatabaseHandler {
    public static final String USER_TABLE = "USER";
    public static final String VEHICLE_TABLE = "VEHICLE";
    public static final String COORDINATES_TABLE = "COORDINATES";

    public static final String USER_TABLE_ID_COLUMN = "ID";
    public static final String USER_TABLE_LOGIN_COLUMN = "LOGIN";
    public static final String USER_TABLE_PASSWORD_COLUMN = "PASSWORD";

    public static final String VEHICLE_TABLE_ID_COLUMN = "ID";
    public static final String VEHICLE_TABLE_KEY_COLUMN = "KEY";
    public static final String VEHICLE_TABLE_NAME_COLUMN = "NAME";
    public static final String VEHICLE_TABLE_CREATION_DATE_COLUMN = "CREATION_DATE";
    public static final String VEHICLE_TABLE_ENGINE_POWER_COLUMN = "ENGINE_POWER";
    public static final String VEHICLE_TABLE_DISTANCE_TRAVELLED_COLUMN = "DISTANCE_TRAVELLED";
    public static final String VEHICLE_TABLE_VEHICLE_TYPE_COLUMN = "VEHICLE_TYPE";
    public static final String VEHICLE_TABLE_FUEL_TYPE_COLUMN = "FUEL_TYPE";
    public static final String VEHICLE_TABLE_COORDINATES_ID_COLUMN = "COORDINATES_ID";
    public static final String VEHICLE_TABLE_USER_ID_COLUMN = "USER_ID";

    public static final String COORDINATES_TABLE_ID_COLUMN = "ID";
    public static final String COORDINATES_TABLE_X_COLUMN = "X";
    public static final String COORDINATES_TABLE_Y_COLUMN = "Y";

    private static final String JDBC_DRIVER = "org.postgresql.Driver";
    
    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseHandler(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDatabase();
    }
    
    private void connectToDatabase() {
        try {
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(url, user, password);
            System.out.println("Соединение с базой данных установлено.");
        } catch (SQLException exception) {
            System.out.println("Произошла ошибка при подключении к базе данных!");
        } catch (ClassNotFoundException exception) {
            System.out.println("Драйвер управления базой дынных не найден!");
        }
    }

    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            //App.logger.info("Подготовлен SQL запрос '" + sqlStatement + "'.");
            return preparedStatement;
        } catch (SQLException exception) {
            Console.println("Произошла ошибка при подготовке SQL запроса '" + sqlStatement + "'.");
            if (connection == null)
                Console.println("Соединение с базой данных не установлено!");
            throw new SQLException(exception);
        }
    }

    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
            Console.println("Закрыт SQL запрос '" + sqlStatement + "'.");
        } catch (SQLException exception) {
            Console.println("Произошла ошибка при закрытии SQL запроса '" + sqlStatement + "'.");
        }
    }

    public void closeConnection() {
        if (connection == null)
            return;
        try {
            connection.close();
            Console.println("Соединение с базой данных разорвано.");
        } catch (SQLException exception) {
            Console.println("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            Console.println("Произошла ошибка при установлении режима транзакции базы данных!");
        }
    }

    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            Console.println("Произошла ошибка при установлении режима транзакции базы данных!");
        }
    }

    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            Console.println("Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }

    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            Console.println("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }

    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            Console.println("Произошла ошибка при сохранении состояния базы данных!");
        }
    }
}

